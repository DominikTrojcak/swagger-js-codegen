/**
* {{&summary}}
* @method
{{#externalDocs}}
* @see {@link {{&url}}|{{#description}}{{&description}}{{/description}}{{^description}}External docs{{/description}}}
{{/externalDocs}}
* @name {{&className}}#{{&methodName}}
*/
{{&methodName}}(
    {{#parameters}}
        {{#isPathParameter}}{{&camelCaseName}}{{&cardinality}}: {{> type}},{{/isPathParameter}}
    {{/parameters}}
    queryParameters: {
        {{#parameters}}
            {{#isQueryParameter}}
                {{^isSingleton}}
                    '{{&camelCaseName}}'{{&cardinality}}: {{> type}},
                {{/isSingleton}}
            {{/isQueryParameter}}
        {{/parameters}}
    } {{&defaultParam}},
    {{#hasBody}}
    body: 
        {{#parameters}}
            {{#isBodyParameter}}
                {{^isSingleton}}
                    {{> type}},
                {{/isSingleton}}
            {{/isBodyParameter}}
        {{/parameters}}
    {{/hasBody}}
): Promise<{{#successResponses}} {{> type}} {{^last}} | {{/last}} {{/successResponses}}>
{
    let path = '{{&path}}';
    let headers: Headers = new Headers();
    let form: any = {};

{{#isSecure}}
    headers = this.appendAuthHeaders(headers);
{{/isSecure}}
{{#headers}}
    headers.append('{{&name}}', '{{&value}}');
{{/headers}}

{{#parameters}}
    {{#isQueryParameter}}
      {{#isSingleton}}
        queryParameters['{{&name}}'] = '{{&singleton}}';
      {{/isSingleton}}
      {{^isSingleton}}
        {{#isPatternType}}
          Object.keys(parameters).forEach(function(parameterName) {
            if(new RegExp('{{&pattern}}').test(parameterName)){
              queryParameters[parameterName] = parameters[parameterName];
            }
          });
        {{/isPatternType}}
        {{#default}}
          /** set default value **/
          {{#isDefaultQuoted}}
          queryParameters['{{&name}}'] = queryParameters['{{&name}}'] !== undefined ? queryParameters['{{&name}}'] : '{{default}}';
          {{/isDefaultQuoted}}
          {{^isDefaultQuoted}}
          queryParameters['{{&name}}'] = queryParameters['{{&name}}'] !== undefined ? queryParameters['{{&name}}'] : {{default}};
          {{/isDefaultQuoted}}
        {{/default}}
      {{/isSingleton}}
    {{/isQueryParameter}}

    {{#isPathParameter}}
        path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', {{&camelCaseName}}.toString());
    {{/isPathParameter}}

    {{#isHeaderParameter}}
        {{#isSingleton}}
            headers['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            if(queryParameters['{{&camelCaseName}}'] !== undefined) {
                headers['{{&name}}'] = queryParameters['{{&camelCaseName}}']!;
            }
        {{/isSingleton}}
    {{/isHeaderParameter}}

    {{#isFormParameter}}
        {{#isSingleton}}
            form['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            if(queryParameters['{{&camelCaseName}}'] !== undefined) {
                form['{{&name}}'] = queryParameters['{{&camelCaseName}}'];
            }
        {{/isSingleton}}
    {{/isFormParameter}}

    {{#required}}
        {{#isQueryParameter}}
            if(queryParameters['{{&camelCaseName}}'] === undefined) {
                throw new Error('Missing required parameter: {{&camelCaseName}}');
            }
        {{/isQueryParameter}}
    {{/required}}

{{/parameters}}

    queryParameters = queryParametersToSnakeCase(queryParameters);

    {{^isBodyParameter}}
        {{#isPOST}}
            form = queryParameters;
        {{/isPOST}}
    {{/isBodyParameter}}

    return this.request(
        '{{method}}',
        `${this.baseUrl}${path}`,
        {{#hasBody}}body{{/hasBody}}{{^hasBody}}{}{{/hasBody}},
        headers,
        queryParameters,
        form
    );
}
